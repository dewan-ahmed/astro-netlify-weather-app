// Write an index.astro page for a simple weather app
// Create three Astro files to build a super simple web application with the following components:
// A title on the page: "Super Simple Astro Weather App"
// Two buttons: one for "Get Current Weather" and another for "Get Historic Weather."
// Input fields for the city name and date range (start date, end date).
// A display box that shows the weather data or any error messages.

// The app should have the following functionality:
// When the user clicks the "Get Current Weather" button, the app should fetch the current weather for the city and display it in the display box.
// When the user clicks the "Get Historic Weather" button, the app should fetch the historic weather for the city and date range and display it in the display box.
// If the user enters an invalid city name, the app should display an error message in the display box.
// If the user enters an invalid date range, the app should display an error message in the display box.
// If the user enters a valid city name and date range, the app should display the weather data in the display box.
// The app should be styled with CSS.

// You can use the OpenWeatherMap API to get the weather data. You will need to sign up for a free API key to use the API. You can use the following API endpoints:
// Current Weather: https://api.openweathermap.org/data/2.5/weather?q={city name}&appid={API key}
// Historic Weather: https://api.openweathermap.org/data/2.5/onecall/timemachine?lat={lat}&lon={lon}&dt={date}&appid={API key}


import { render } from 'preact';
import { useState } from 'preact/hooks';
import { useFetch } from 'preact-fetch';
import { useEffect } from 'preact/hooks';
import { useRef } from 'preact/hooks';
import { useReducer } from 'preact/hooks';
import { useLayoutEffect } from 'preact/hooks';
import { useImperativeHandle } from 'preact/hooks';
import { useMemo } from 'preact/hooks';
import { useCallback } from 'preact/hooks';
import { useContext } from 'preact/hooks';
import { useDebugValue } from 'preact/hooks';
import { useErrorBoundary } from 'preact/hooks';
import { useTransition } from 'preact/hooks';
import { useDeferredValue } from 'preact/hooks';
import { useOpaqueIdentifier } from 'preact/hooks';
import { useMutableSource } from 'preact/hooks';
import { useSyncExternalStore } from 'preact/hooks';
import { useTransition } from 'preact/hooks';
import { useDeferredValue } from 'preact/hooks';
import { useOpaqueIdentifier } from 'preact/hooks';

const App = () => {
  const [city, setCity] = useState('');
  const [date, setDate] = useState('');
  const [weather, setWeather] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const fetchWeather = async () => {
    setLoading(true);
    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=9e9b0b7b3b9c2b2b7b9b9b9b9b9b9b9b`);
    const data = await response.json();
    setWeather(data);
    setLoading(false);
  }

  const fetchHistoricWeather = async () => {
    setLoading(true);

    const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${city}&lon=${date}&dt=${date}&appid=9e9b0b7b3b9c2b2b7b9b9b9b9b9b9b9b`);
    const data = await response.json();
    setWeather(data);
    setLoading(false);
  }

  const handleSubmit = (e) => {
    e.preventDefault();
    if (city && date) {
      fetchHistoricWeather();
    } else if (city) {
      fetchWeather();
    } else {
      setError('Please enter a city name');
    }
  }

  return (
    <div>
      <h1>Super Simple Astro Weather App</h1>
      <form onSubmit={handleSubmit}>
        <label>
          City Name:
          <input type="text" value={city} onChange={(e) => setCity(e.target.value)} />
        </label>
        <label>
          Date:
          <input type="text" value={date} onChange={(e) => setDate(e.target.value)} />
        </label>
        <button type="submit">Get Current Weather</button>
        <button type="submit">Get Historic Weather</button>
      </form>
      {loading && <div>Loading...</div>}
      {error && <div>{error}</div>}
      {weather && (
        <div>
          <div>{weather.name}</div>
          <div>{weather.main.temp}</div>
          <div>{weather.main.temp_min}</div>
          <div>{weather.main.temp_max}</div>
        </div>
      )}
    </div>
  )
}
